package jgossit.server;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.TimeZone;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.codec.binary.Base64;

import com.google.appengine.api.images.Composite;
import com.google.appengine.api.images.Image;
import com.google.appengine.api.images.ImagesService;
import com.google.appengine.api.images.ImagesServiceFactory;
import com.google.appengine.api.images.Transform;

public class DaysToGoServlet  extends HttpServlet
{
	private static final long serialVersionUID = 1L;
	
	private static final ImagesService IMAGES_SERVICE = ImagesServiceFactory.getImagesService();
	private static final Pattern DATE_PATTERN = Pattern.compile("(\\d{4})-(\\d{1,2})-(\\d{1,2})");
	// png image data for numbers 0-9
	private static final String NUMBERS_IMAGE_DATA = "";
	private static final byte[] NUMBERS_IMAGE_BYTES = Base64.decodeBase64(NUMBERS_IMAGE_DATA);
	private static final int NUMBER_IMAGE_WIDTH = 24;
	private static final int NUMBER_IMAGE_HEIGHT = 37;
	private static final Image[] NUMBER_IMAGES = new Image[10];
	static
	{
		for (int i=0; i<10; i++)
		{
			Transform transform = ImagesServiceFactory.makeCrop(i*0.1, 0.0, (i+1)*0.1, 1.0); // 0.1 = 10% of 0.0 to 1.0 limit
			NUMBER_IMAGES[i] = IMAGES_SERVICE.applyTransform(transform, ImagesServiceFactory.makeImage(NUMBERS_IMAGE_BYTES));
		}
	}
	// png image data for 'days to go'
	private static final String DAYSTOGO_IMAGE_DATA = "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";
	private static final byte[] DAYSTOGO_IMAGE_BYTES = Base64.decodeBase64(DAYSTOGO_IMAGE_DATA);
	private static final Image DAYSTOGO_IMAGE = ImagesServiceFactory.makeImage(DAYSTOGO_IMAGE_BYTES);
	private static final int DAYSTOGO_IMAGE_WIDTH = 110;
	private static final int DAYSTOGO_IMAGE_HEIGHT = 24;
	
	public void doPost(HttpServletRequest req, HttpServletResponse resp) throws IOException
	{
		String date = req.getParameter("date");
		if (date == null)
			return;
		Matcher matcher = DATE_PATTERN.matcher(date);
		if (!matcher.matches())
			return;
		int year = Integer.parseInt(matcher.group(1));
		int month = Integer.parseInt(matcher.group(2));
		int day = Integer.parseInt(matcher.group(3));
		if (year < 2013 || month < 1 || month > 12 || day < 1 || day > 31)
			return;
		
		byte[] imageData = createImage(year, month, day);
		resp.setContentType("image/png");
		resp.setContentLength(imageData.length);
		resp.getOutputStream().write(imageData);
		//String imageDataBase64 = Base64.encodeBase64String(imageData);
		//resp.getWriter().print("<img src=\"data:image/png;base64," + imageDataBase64 + "\" />");
	}
	
	private byte[] createImage(int year, int month, int day)
	{
		Calendar calendarNow = Calendar.getInstance(TimeZone.getTimeZone("Australia/Melbourne"));
		calendarNow.setTimeInMillis(System.currentTimeMillis());
		Calendar calendarThen = Calendar.getInstance(TimeZone.getTimeZone("Australia/Melbourne"));
		calendarThen.set(year, month-1, day, 23, 59, 59);
		long diff = calendarThen.getTimeInMillis() - calendarNow.getTimeInMillis();
		int daysToGo = (int)Math.floor( diff / (24 * 60 * 60 * 1000) );
		if (daysToGo < 0)
			daysToGo = 0;
		String daysToGoString = ""+daysToGo;
		
		int daysToGoNumbersImageWidth = (daysToGoString.length() * NUMBER_IMAGE_WIDTH) + ((daysToGoString.length()-1) * 1); // 1px space
		int outputImageWidth = Math.max(daysToGoNumbersImageWidth, DAYSTOGO_IMAGE_WIDTH);
		int daysToGoNumbersImagePadding = 0;
		int daysToGoTextImagePadding = 0;
		if (daysToGoNumbersImageWidth < outputImageWidth)
			daysToGoNumbersImagePadding = (int) Math.floor((DAYSTOGO_IMAGE_WIDTH - daysToGoNumbersImageWidth) / 2);
		else
			daysToGoTextImagePadding = (int) Math.floor((daysToGoNumbersImageWidth - DAYSTOGO_IMAGE_WIDTH) / 2);
		
		ArrayList<Composite> composites = new ArrayList<Composite>();
		int xOffset = daysToGoNumbersImagePadding;
		for (int i=0;i<daysToGoString.length();i++)
		{
			int daysToGoNumber = Integer.parseInt(daysToGoString.substring(i,i+1));
			composites.add( ImagesServiceFactory.makeComposite(NUMBER_IMAGES[daysToGoNumber], xOffset, 0, 1.0f, Composite.Anchor.TOP_LEFT) );
			xOffset += NUMBER_IMAGE_WIDTH + 1; // 1px spacing
		}
		
		composites.add( ImagesServiceFactory.makeComposite(DAYSTOGO_IMAGE, daysToGoTextImagePadding, NUMBER_IMAGE_HEIGHT + 10, 1.0f, Composite.Anchor.TOP_LEFT) );  // 10px spacing
			
		Image output = IMAGES_SERVICE.composite(composites, outputImageWidth, NUMBER_IMAGE_HEIGHT + 10 + DAYSTOGO_IMAGE_HEIGHT, 0, ImagesService.OutputEncoding.PNG);
		byte[] imageData = output.getImageData();
		return imageData;
	}
	
	public void doGet(HttpServletRequest req, HttpServletResponse resp) throws IOException
	{
		doPost(req, resp);
	}
}